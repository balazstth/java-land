/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package JavaLand.ui;

import JavaLand.util.ContainerMonitor;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.IOException;
import java.net.URL;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author aladar
 */
public class MainFrame extends javax.swing.JFrame {

    //==========================================================================
    // Fields
    //==========================================================================
    private NotepadInternalFrame notepad;
    private PaletteInternalFrame palette;
    private AboutDialog aboutDialog;

    // Keeping a last focus list ourselves, since hiding a JInternalFrame does
    // not automatically focus another one on JDesktopPane.
    public LinkedList<JInternalFrame> lastFocus = new LinkedList<>();
    
    //==========================================================================
    // Constructor
    //==========================================================================
    /**
     * Creates new form MainJFrame
     */
    public MainFrame() {
        initComponents();
        this.setTitle("Java Land");
        ContainerMonitor.registerContainer(this, MainFrame.class.getName(),
                this.getX(), this.getY(), this.getWidth(), this.getHeight());

        // Read the image that will be used as the application icon.
        // Using "/" in front of the image file name will locate the
        // image at the root folder of our application. If you don't
        // use a "/" then the image file should be on the same folder
        // with your class file.
        // In a NetBeans project / = src/main/resources by default.
        try {
            URL resource = this.getClass().getResource("/icon.png");
            BufferedImage image = ImageIO.read(resource);
            this.setIconImage(image);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "There was an error while loading the program icon.");
            Logger.getLogger(NotepadInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        utilityMenu = new javax.swing.JMenu();
        notepadMenuItem = new javax.swing.JMenuItem();
        paletteMenuItem = new javax.swing.JMenuItem();
        gameMenu = new javax.swing.JMenu();
        invadersMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        defaultsMenuItem = new javax.swing.JMenuItem();
        closeInternalWindowMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout desktopPaneLayout = new javax.swing.GroupLayout(desktopPane);
        desktopPane.setLayout(desktopPaneLayout);
        desktopPaneLayout.setHorizontalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 869, Short.MAX_VALUE)
        );
        desktopPaneLayout.setVerticalGroup(
            desktopPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
        );

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        mainMenuBar.add(fileMenu);

        utilityMenu.setMnemonic('U');
        utilityMenu.setText("Utility");

        notepadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        notepadMenuItem.setMnemonic('N');
        notepadMenuItem.setText("Notepad");
        notepadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notepadMenuItemActionPerformed(evt);
            }
        });
        utilityMenu.add(notepadMenuItem);

        paletteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        paletteMenuItem.setMnemonic('P');
        paletteMenuItem.setText("Palette");
        paletteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paletteMenuItemActionPerformed(evt);
            }
        });
        utilityMenu.add(paletteMenuItem);

        mainMenuBar.add(utilityMenu);

        gameMenu.setMnemonic('G');
        gameMenu.setText("Game");

        invadersMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_MASK));
        invadersMenuItem.setMnemonic('I');
        invadersMenuItem.setText("Invaders");
        gameMenu.add(invadersMenuItem);

        mainMenuBar.add(gameMenu);

        optionsMenu.setMnemonic('O');
        optionsMenu.setText("Options");

        defaultsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        defaultsMenuItem.setMnemonic('D');
        defaultsMenuItem.setText("Defaults");
        defaultsMenuItem.setToolTipText("");
        defaultsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultsMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(defaultsMenuItem);

        closeInternalWindowMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeInternalWindowMenuItem.setText("Close Internal Window");
        closeInternalWindowMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeInternalWindowMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(closeInternalWindowMenuItem);

        mainMenuBar.add(optionsMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //==========================================================================
    // Exit
    //==========================================================================
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // Close internal frames and co.
        formWindowClosing(null);
        dispose();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    //==========================================================================
    // About
    //==========================================================================
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        if (aboutDialog == null) {
            aboutDialog = new AboutDialog(this, false); // or rootPaneCheckingEnabled
        }
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    //==========================================================================
    // Palette
    //==========================================================================
    private void paletteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paletteMenuItemActionPerformed
        if (palette == null) setupPalette();
        // Adding no duplicates
        if (lastFocus.isEmpty()
                || (lastFocus.size() > 0 && lastFocus.getLast() != palette)) lastFocus.push(palette);
        show(palette);
    }//GEN-LAST:event_paletteMenuItemActionPerformed

    private void setupPalette() {
        palette = PaletteInternalFrame.getInstance();
        palette.setMainFrame(this);            
        palette.setDesktop(desktopPane);            
        desktopPane.add(palette);
    }

    //==========================================================================
    // Defaults
    // Sets default size, location, etc. Creates widgets if they are not yet
    // initialized.
    //==========================================================================
    private void defaultsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultsMenuItemActionPerformed
        //----------------------------------------------------------------------
        // MainFrame
        ContainerMonitor.setDefaults(this, MainFrame.class.getName());

        //----------------------------------------------------------------------
        // Notepad
        if (notepad == null) setupNotepad();
        ContainerMonitor.setDefaults(notepad, NotepadInternalFrame.class.getName());

        //----------------------------------------------------------------------
        // Palette
        if (palette == null) setupPalette();
        ContainerMonitor.setDefaults(palette, PaletteInternalFrame.class.getName());
    }//GEN-LAST:event_defaultsMenuItemActionPerformed

    //==========================================================================
    // Notepad
    //==========================================================================
    private void notepadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notepadMenuItemActionPerformed
        if (notepad == null) setupNotepad();
        // Adding no duplicates
        if (lastFocus.isEmpty()
                || (lastFocus.size() > 0 && lastFocus.getLast() != notepad)) lastFocus.push(notepad);
        show(notepad);
    }//GEN-LAST:event_notepadMenuItemActionPerformed

    private void setupNotepad() {
        notepad = NotepadInternalFrame.getInstance();
        notepad.setMainFrame(this);            
        notepad.setDesktop(desktopPane);            
        desktopPane.add(notepad);
    }

    //==========================================================================
    // Show internal frame
    //==========================================================================
    public void show(JInternalFrame frame) {
        frame.setVisible(true);
        frame.toFront();
        try {
            frame.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }
    
    //==========================================================================
    // Close (Hide!) internal frame
    //==========================================================================
    private void closeInternalWindowMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeInternalWindowMenuItemActionPerformed
//        if (lastFocus.size() > 0) {
//            lastFocus.pop().hide();
//        }
        JInternalFrame selected = desktopPane.getSelectedFrame();
        if (selected != null) selected.hide();
    }//GEN-LAST:event_closeInternalWindowMenuItemActionPerformed

    //==========================================================================
    // Closing
    //==========================================================================
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (notepad != null) {
            notepad.dispose();
        }
        if (palette != null) {
            palette.dispose();
        }
    }//GEN-LAST:event_formWindowClosing
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem closeInternalWindowMenuItem;
    private javax.swing.JMenuItem defaultsMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem invadersMenuItem;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JMenuItem notepadMenuItem;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem paletteMenuItem;
    private javax.swing.JMenu utilityMenu;
    // End of variables declaration//GEN-END:variables
}
